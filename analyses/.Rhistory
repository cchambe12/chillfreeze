if(type=="sds"){
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-SDs.sites[,i],breaks = 100))]
}
plot(worldmap,col="lightgrey",border="lightgrey",
xlim=c(extent.sps.i[1],extent.sps.i[2]),
ylim=c(extent.sps.i[3],extent.sps.i[4]))
text(extent.sps.i[2]-1,extent.sps.i[4],
colnames(SDs.sites)[i],pos=2)
plot(spsshapeproj,col=adjustcolor('lightgrey',0),add=T,
border=adjustcolor('lightgrey',0.5))
points(means.sites$x,means.sites$y,col=cols1,pch=19,cex=0.8)
}
dev.off()
}
means.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = mean,na.rm=T)
means.sites$lat.long <- NULL
SDs.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = sd,na.rm=T)
SDs.sites$lat.long <- NULL
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-means.sites[,i],breaks = 100))]
means.sites
View(sps.i)
View(chcoord)
means.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = mean,na.rm=T)
means.sites$lat.long <- NULL
means.sites$X <- NULL
SDs.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = sd,na.rm=T)
SDs.sites$lat.long <- NULL
SDs.sites$X <- NULL
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-means.sites[,i],breaks = 100))]
i=4
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-means.sites[,i],breaks = 100))]
cols1
plot.shape.data<-function(spsshape,sps.name,
dir.out,dir.fig,
type=c("means","sds")){
#i=14
#spsshape <- getspsshape(spslist,i,tmin1980[[1]])
#spsshape <- NamMap
## plot base map + range map
extent.sps.i <- extent(spsshape)+3
ras.numpixels<-tmin1980[[1]]
values(ras.numpixels)<-1:ncell(ras.numpixels)
#spsshapeproj<-spTransform(spsshape,proj4string(ras.numpixels))
# get list of pixels to extract data (speeds things up)
pixels.sps.i<-unique(sort(unlist(raster::extract(ras.numpixels,spsshapeproj))))
chcoord <- as.data.frame(coordinates(tmin1980)[pixels.sps.i,])
chcoord$lat.long <- paste(chcoord$x, chcoord$y)
dat$lat.long <- paste(dat$x, dat$y)
#if(extent.sps.i[2]>50){extent.sps.i[2] = 50}
#if(extent.sps.i[3]<32){extent.sps.i[3] = 32}
## retrieve and format data
## code to plot within range climate interannual variation
dir.out <- "~/Documents/git/ospree/analyses/ranges/output/"
files.out <- dir(dir.out)
#sps.out <- files.out[which(grepl(sps.name,files.out)&grepl("fullextract",files.out))]
#dat = read.csv(paste(dir.out,sps.out,sep=""))
#dat = as.data.frame(na.omit(dat))
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
sps.i <- na.omit(sps.i)
sps.i <- sps.i[!duplicated(sps.i),]
means.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = mean,na.rm=T)
means.sites$lat.long <- NULL
means.sites$X <- NULL
SDs.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = sd,na.rm=T)
SDs.sites$lat.long <- NULL
SDs.sites$X <- NULL
#dat <- sps.1
if(type=="means"){
pdf(paste(dir.fig,sps.name,'.means.pdf',sep="")
,width = 12
)
}
if(type=="sds"){
pdf(paste(dir.fig,sps.name,'.sds.pdf',sep="")
,width = 12
)
}
par(mfrow=c(2,3),mar=c(1,1,1,1))
for(i in c(4,5,7:10)){#i=5
if(type=="means"){
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-means.sites[,i],breaks = 100))]
}
if(type=="sds"){
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-SDs.sites[,i],breaks = 100))]
}
plot(worldmap,col="lightgrey",border="lightgrey",
xlim=c(extent.sps.i[1],extent.sps.i[2]),
ylim=c(extent.sps.i[3],extent.sps.i[4]))
text(extent.sps.i[2]-1,extent.sps.i[4],
colnames(SDs.sites)[i],pos=2)
plot(spsshapeproj,col=adjustcolor('lightgrey',0),add=T,
border=adjustcolor('lightgrey',0.5))
points(means.sites$x,means.sites$y,col=cols1,pch=19,cex=0.8)
}
dev.off()
}
for (i in 1:length(spslist)){ #i=14
print(spslist[i])
spsshape <- getspsshape(spslist,i,tmin1980[[1]])
#spsshape <- NamMap
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'sds')
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'means')
#plot.shape.data(spsshape,"all",
#               dir.out,dir.fig,'sds')
#plot.shape.data(spsshape,"all",
#               dir.out,dir.fig,'means')
}
SDs.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = sd,na.rm=T)
SDs.sites$lat.long <- NULL
SDs.sites
sps.i
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
sps.i <- na.omit(sps.i)
sps.i <- sps.i[!duplicated(sps.i),]
sps.i$X <- NULL
means.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = mean,na.rm=T)
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
sps.i <- na.omit(sps.i)
sps.i <- sps.i[!duplicated(sps.i),]
means.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = mean,na.rm=T)
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
head(dat)
dat$lat.long <- paste(dat$x, dat$y)
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
sps.i <- na.omit(sps.i)
sps.i <- sps.i[!duplicated(sps.i),]
means.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = mean,na.rm=T)
View(sps.i)
SDs.sites <- aggregate(sps.i,by=list(coord = sps.i$lat.long),FUN = sd,na.rm=T)
View(SDs.sites)
View(means.sites)
means.sites <- aggregate(dat,by=list(Year = dat$ID),FUN = mean,na.rm=T)
SDs.sites <- aggregate(dat,by=list(Year = dat$ID),FUN = sd,na.rm=T)
means.sites <- aggregate(sps.i,by=list(Year = sps.i$ID),FUN = mean, na.rm=T)
means.sites$lat.long <- NULL
SDs.sites <- aggregate(sps.i, by=list(Year = sps.i$ID), FUN = sd, na.rm=T)
View(sps.i)
spslist <- unname(species.list.clean)
save <- spslist
spslist <- spslist[[14]]
## plot base map + range map
extent.sps.i <- extent(spsshape)+3
ras.numpixels<-tmin1980[[1]]
values(ras.numpixels)<-1:ncell(ras.numpixels)
# get list of pixels to extract data (speeds things up)
pixels.sps.i<-unique(sort(unlist(raster::extract(ras.numpixels,spsshapeproj))))
chcoord <- as.data.frame(coordinates(tmin1980)[pixels.sps.i,])
chcoord$lat.long <- paste(chcoord$x, chcoord$y)
dat$lat.long <- paste(dat$x, dat$y)
## retrieve and format data
## code to plot within range climate interannual variation
dir.out <- "~/Documents/git/ospree/analyses/ranges/output/"
files.out <- dir(dir.out)
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
sps.i <- na.omit(sps.i)
sps.i <- sps.i[!duplicated(sps.i),]
means.sites <- aggregate(sps.i,by=list(Year = sps.i$ID),FUN = mean, na.rm=T)
means.sites$lat.long <- NULL
SDs.sites <- aggregate(sps.i, by=list(Year = sps.i$ID), FUN = sd, na.rm=T)
SDs.sites$lat.long <- NULL
means.sites <- aggregate(sps.i,by=list(Year = sps.i$lat.long),FUN = mean, na.rm=T)
unique(dat$year)
dat$year <- rep(1980:2016, each=44622)
plot.shape.data<-function(spsshape,sps.name,
dir.out,dir.fig,
type=c("means","sds")){
#i=14
#spsshape <- getspsshape(spslist,i,tmin1980[[1]])
#spsshape <- NamMap
## plot base map + range map
extent.sps.i <- extent(spsshape)+3
ras.numpixels<-tmin1980[[1]]
values(ras.numpixels)<-1:ncell(ras.numpixels)
#spsshapeproj<-spTransform(spsshape,proj4string(ras.numpixels))
# get list of pixels to extract data (speeds things up)
pixels.sps.i<-unique(sort(unlist(raster::extract(ras.numpixels,spsshapeproj))))
chcoord <- as.data.frame(coordinates(tmin1980)[pixels.sps.i,])
chcoord$lat.long <- paste(chcoord$x, chcoord$y)
dat$lat.long <- paste(dat$x, dat$y)
#if(extent.sps.i[2]>50){extent.sps.i[2] = 50}
#if(extent.sps.i[3]<32){extent.sps.i[3] = 32}
## retrieve and format data
## code to plot within range climate interannual variation
dir.out <- "~/Documents/git/ospree/analyses/ranges/output/"
files.out <- dir(dir.out)
#sps.out <- files.out[which(grepl(sps.name,files.out)&grepl("fullextract",files.out))]
#dat = read.csv(paste(dir.out,sps.out,sep=""))
#dat = as.data.frame(na.omit(dat))
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
sps.i <- na.omit(sps.i)
sps.i <- sps.i[!duplicated(sps.i),]
means.sites <- aggregate(sps.i,by=list(Year = sps.i$lat.long),FUN = mean, na.rm=T)
means.sites$lat.long <- NULL
SDs.sites <- aggregate(sps.i, by=list(Year = sps.i$lat.long), FUN = sd, na.rm=T)
SDs.sites$lat.long <- NULL
#dat <- sps.1
if(type=="means"){
pdf(paste(dir.fig,sps.name,'.means.pdf',sep="")
,width = 12
)
}
if(type=="sds"){
pdf(paste(dir.fig,sps.name,'.sds.pdf',sep="")
,width = 12
)
}
par(mfrow=c(2,3),mar=c(1,1,1,1))
for(i in c(4,5,7:10)){#i=5
if(type=="means"){
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-means.sites[,i],breaks = 100))]
}
if(type=="sds"){
cols1<-colorRampPalette(brewer.pal(9,"RdYlBu"))(100)[as.numeric(cut(-SDs.sites[,i],breaks = 100))]
}
plot(worldmap,col="lightgrey",border="lightgrey",
xlim=c(extent.sps.i[1],extent.sps.i[2]),
ylim=c(extent.sps.i[3],extent.sps.i[4]))
text(extent.sps.i[2]-1,extent.sps.i[4],
colnames(SDs.sites)[i],pos=2)
plot(spsshapeproj,col=adjustcolor('lightgrey',0),add=T,
border=adjustcolor('lightgrey',0.5))
points(means.sites$x,means.sites$y,col=cols1,pch=19,cex=0.8)
}
dev.off()
}
spslist <- save
spslist <- spslist[8]
for (i in 1:length(spslist)){ #i=14
print(spslist[i])
spsshape <- getspsshape(spslist,i,tmin1980[[1]])
#spsshape <- NamMap
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'sds')
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'means')
#plot.shape.data(spsshape,"all",
#               dir.out,dir.fig,'sds')
#plot.shape.data(spsshape,"all",
#               dir.out,dir.fig,'means')
}
spslist <- save
spslist <- spslist[1]
i=1
spslist <- save
i=1
print(spslist[i])
spsshape <- getspsshape(spslist,i,tmin1980[[1]])
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'sds')
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'means')
i=8
print(spslist[i])
spsshape <- getspsshape(spslist,i,tmin1980[[1]])
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'sds')
plot.shape.data(spsshape,names(species.list.clean)[i],
dir.out,dir.fig,'means')
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/analyses/ranges/")
} else if (length(grep("ailene", getwd()))>0) {setwd("/Users/aileneettinger/git/ospree/analyses/ranges/")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/ranges/")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/ranges/")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/ranges/")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/ranges")
## load packages
library('raster')
library('ncdf4')
library('abind')
library('chillR')
library('RColorBrewer')
library('dismo')
species.list <- read.csv("~/Documents/git/ospree/analyses/output/masterspecieslist.csv")
species.list <- as.vector(species.list$x)
## read in list of species with distribution shapefiles
# get a list of the polygon shapefiles in the .zip with the maps
zipped_names <- grep('\\.shp', unzip("~/Documents/git/ospree/analyses/ranges/NA_range_files/NA_ranges.zip", list=TRUE)$Name,ignore.case=TRUE, value=TRUE)
# generate a list of species with maps in the .zip
species.list.maps <- unlist(zipped_names)
species.list.maps <- gsub(pattern = "(.*/)(.*)(.shp.*)", replacement = "\\2", x = species.list.maps)
species.list.clean <- species.list.maps
rmspp <- c("alnurubr", "._robipseu", "._poputrem", "._alnurugo", "._picemari")
species.list.clean <- species.list.clean[!species.list.clean%in%rmspp]
## Now I need to rename these folders to match the ospree info
names(species.list.clean) <- c("Betula_lenta", "Populus_grandidentata", "Fagus_grandifolia", "Quercus_rubra",
"Acer_pensylvanicum", "Betula_papyrifera", "Fraxinus_nigra", "Picea_mariana", "Robinia_pseudoacacia",
"Pseudotsuga_menziesii", "Prunus_pensylvanica", "Populus_tremuloides", "Betula_alleghaniensis",
"Acer_saccharum", "Alnus_incana", "Acer_rubrum", "Corylus_cornuta", "Picea_glauca")
# get a list of species in ospree for which we have EU maps
ospreespslist <- species.list[which(species.list %in% names(species.list.clean))]
spslist <- unname(species.list.clean)
files.out <- dir("~/Documents/git/ospree/analyses/ranges/climoutput/")
dat <- read.csv("~/Desktop/Misc/Ospree Misc/Nam_allspp_fullextract.csv")
dat <- dat[-1]
tmin1980 <- brick("~/Desktop/Misc/Ospree misc/tmincrop1980.nc")
## function to extract/correct the shape for a given species
getspsshape<-function(spslist,sps.num,ras.numpixels){
i<-sps.num #sps.num=14
spsi<-spslist[i]
print(spsi)
#fullnamei<-fullnames[i]
## load shape
path.source.i <- "~/Documents/git/ospree/analyses/ranges/NA_range_files/NA_ranges.zip"
# get the file address for target file
unzipped <- unzip("~/Documents/git/ospree/analyses/ranges/NA_range_files/NA_ranges.zip", list = TRUE)$Name
shpsource <-"NA_ranges"
zipped_name.i <- grep(paste(shpsource, spsi, spsi, sep="/"), unzipped, ignore.case = TRUE, value = TRUE)
if(length(zipped_name.i)==0){
specific <- unlist(strsplit(spsi,"_"))[2]
unzipped <- unzip("~/Documents/git/ospree/analyses/ranges/NA_range_files/NA_ranges.zip", list = TRUE)$Name
}
# extract target file
unzip(path.source.i, files=zipped_name.i)
# load shapefile
spsshape <- shapefile(zipped_name.i[1])
## need to re-project shape from lamber equal area to geographic
proj4string(spsshape) <- CRS("+proj=longlat +init=epsg:4326")
spsshapeproj<-spTransform(spsshape,CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0 "))
#spsshapeproj<-spTransform(spsshape,CRS("+proj=longlat +datum=WGS84
#                                      +ellps=WGS84 +towgs84=0,0,0"))
#lines(spsshapeproj)
#
return(spsshapeproj)
}
synth.data <- function(splist){
list.synthesis<-list()
for(i in 1:length(splist)){  #i=7
spsshape <- getspsshape(splist,i,tmin1980[[1]])
## plot base map + range map
extent.sps.i <- extent(spsshape)+3
ras.numpixels<-tmin1980[[1]]
values(ras.numpixels)<-1:ncell(ras.numpixels)
spsshapeproj<-spTransform(spsshape,proj4string(ras.numpixels))
# get list of pixels to extract data (speeds things up)
pixels.sps.i<-unique(sort(unlist(raster::extract(ras.numpixels,spsshapeproj))))
chcoord <- as.data.frame(coordinates(tmin1980)[pixels.sps.i,])
chcoord$lat.long <- paste(chcoord$x, chcoord$y)
dat$lat.long <- paste(dat$x, dat$y)
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
year1<-subset(sps.i,year==1980)
years = unique(sps.i$year)
nyears = length(years)
sps.i$ID = paste(sps.i$long,sps.i$lat)
storing = array(NA, dim=c(7,4))
row.names(storing) = colnames(sps.i)[3:9]
colnames(storing) = c("Temp.Mean","Temp.SD","Geo.Mean","Geo.SD")
means.years <- aggregate(sps.i,by=list(Year = sps.i$year),FUN = mean,na.rm=T)
SDs.years <- aggregate(sps.i,by=list(Year = sps.i$year),FUN = sd,na.rm=T)
means.sites <- aggregate(sps.i,by=list(Year = sps.i$ID),FUN = mean,na.rm=T)
SDs.sites <- aggregate(sps.i,by=list(Year = sps.i$ID),FUN = sd,na.rm=T)
storing[,1] <- colMeans(means.years[,4:10], na.rm = T)
storing[,2] <- colMeans(SDs.years[,4:10], na.rm = T)
storing[,3] <- colMeans(means.sites[,4:10], na.rm = T)
storing[,4] <- colMeans(SDs.sites[,4:10], na.rm = T)
list.synthesis[[i]]<-storing
}
return(list.synthesis)
}
list.allsps<-synth.data(spslist[1:17]) #1:17
list.allsps<-synth.data(spslist[1:20]) #1:17
list.allsps<-synth.data(spslist[1:18]) #1:17
## function to extract/correct the shape for a given species
getspsshape<-function(spslist,sps.num,ras.numpixels){
i<-sps.num #sps.num=14
spsi<-spslist[i]
print(spsi)
#fullnamei<-fullnames[i]
## load shape
path.source.i <- "~/Documents/git/ospree/analyses/ranges/NA_range_files/NA_ranges.zip"
# get the file address for target file
unzipped <- unzip("~/Documents/git/ospree/analyses/ranges/NA_range_files/NA_ranges.zip", list = TRUE)$Name
shpsource <-"NA_ranges"
zipped_name.i <- grep(paste(shpsource, spsi, spsi, sep="/"), unzipped, ignore.case = TRUE, value = TRUE)
if(length(zipped_name.i)==0){
specific <- unlist(strsplit(spsi,"_"))[2]
unzipped <- unzip("~/Documents/git/ospree/analyses/ranges/NA_range_files/NA_ranges.zip", list = TRUE)$Name
}
# extract target file
unzip(path.source.i, files=zipped_name.i)
# load shapefile
spsshape <- shapefile(zipped_name.i[1])
## need to re-project shape from lamber equal area to geographic
if(i==8){
proj4string(spsshape) <- CRS("+proj=aea
+lat_1=38 +lat_2=42 +lat_0=40 +lon_0=-82 +x_0=0 +y_0=0
+units=m +datum=NAD27 +ellps=clrk66 +no_defs")
} else{
proj4string(spsshape) <- CRS("+proj=longlat +init=epsg:4326")
}
spsshapeproj<-spTransform(spsshape,CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0 "))
#spsshapeproj<-spTransform(spsshape,CRS("+proj=longlat +datum=WGS84
#                                      +ellps=WGS84 +towgs84=0,0,0"))
#lines(spsshapeproj)
#
return(spsshapeproj)
}
synth.data <- function(splist){
list.synthesis<-list()
for(i in 1:length(splist)){  #i=7
spsshape <- getspsshape(splist,i,tmin1980[[1]])
## plot base map + range map
extent.sps.i <- extent(spsshape)+3
ras.numpixels<-tmin1980[[1]]
values(ras.numpixels)<-1:ncell(ras.numpixels)
spsshapeproj<-spTransform(spsshape,proj4string(ras.numpixels))
# get list of pixels to extract data (speeds things up)
pixels.sps.i<-unique(sort(unlist(raster::extract(ras.numpixels,spsshapeproj))))
chcoord <- as.data.frame(coordinates(tmin1980)[pixels.sps.i,])
chcoord$lat.long <- paste(chcoord$x, chcoord$y)
dat$lat.long <- paste(dat$x, dat$y)
sps.i <- dat[(dat$lat.long%in%chcoord$lat.long),]
year1<-subset(sps.i,year==1980)
years = unique(sps.i$year)
nyears = length(years)
sps.i$ID = paste(sps.i$long,sps.i$lat)
storing = array(NA, dim=c(7,4))
row.names(storing) = colnames(sps.i)[3:9]
colnames(storing) = c("Temp.Mean","Temp.SD","Geo.Mean","Geo.SD")
means.years <- aggregate(sps.i,by=list(Year = sps.i$year),FUN = mean,na.rm=T)
SDs.years <- aggregate(sps.i,by=list(Year = sps.i$year),FUN = sd,na.rm=T)
means.sites <- aggregate(sps.i,by=list(Year = sps.i$ID),FUN = mean,na.rm=T)
SDs.sites <- aggregate(sps.i,by=list(Year = sps.i$ID),FUN = sd,na.rm=T)
storing[,1] <- colMeans(means.years[,4:10], na.rm = T)
storing[,2] <- colMeans(SDs.years[,4:10], na.rm = T)
storing[,3] <- colMeans(means.sites[,4:10], na.rm = T)
storing[,4] <- colMeans(SDs.sites[,4:10], na.rm = T)
list.synthesis[[i]]<-storing
}
return(list.synthesis)
}
list.allsps<-synth.data(spslist[1:18]) #1:17
nams<-list()
for(i in 1:18){
nams[[i]]=rep(spslist[i],7)
}
nams=unlist(nams)
## join values from the list and save
list.allspsjoint <- as.data.frame(do.call(rbind,list.allsps))
list.allspsjoint$species <- nams
list.allspsjoint$variable <- rep(row.names(list.allspsjoint)[1:7],17)
list.allspsjoint$variable <- rep(row.names(list.allspsjoint)[1:7],18)
write.csv(list.allspsjoint,file = "~/Documents/git/ospree/analyses/ranges/output/Synthesis_climate_Namsps.csv", row.names=FALSE)
View(list.allspsjoint)
#load models and data to report numbers of things
options(stringsAsFactors = FALSE)
library(brms)
## Set Working Directory
setwd("/Users/CatherineChamberlain/Documents/git/chillfreeze/analyses/")
## load the model
load("stan/dvr_brms.Rdata")
load("stan/gslengthlo_brms_adjusted.Rdata")
load("stan/meristem_brms.Rdata")
load("stan/chlavg_brms.Rdata")
load("stan/toughness_brms.Rdata")
load("stan/thickness_brms.Rdata")
load("stan/htfinal_brms.Rdata") ## need to download to compile
load("stan/totbiomass_brms.Rdata")
load("stan/roottoshoot_brms.Rdata")
chillfrz <- read.csv("output/clean_dvr_traits.csv", header=TRUE)
rmspp <- c("NYSSYL", "FAGGRA")
chillfrz <- chillfrz[!(chillfrz$species%in%rmspp),]
### DVR Model - WITH ENOUGH CHILLING, CAN COMPENSATE FOR TX!!!
dvrtx<-format(round(mean(fixef(dvr.mod, pars="tx", summary=FALSE)), digits=1), nsmall=1) ### 2.97
dvrtxsd<-format(round(mean(fixef(dvr.mod, pars="tx")[2]), digits=1), nsmall=1)
dvrchill1<-format(round(mean(fixef(dvr.mod, pars="chill1", summary=FALSE)), digits=1), nsmall=1) # -0.53
dvrchill1sd<-format(round(mean(fixef(dvr.mod, pars="chill1")[2]), digits=1), nsmall=1)
dvrchill2<-format(round(mean(fixef(dvr.mod, pars="chill2", summary=FALSE)), digits=1), nsmall=1) ### -2.67
dvrchill2sd<-format(round(mean(fixef(dvr.mod, pars="chill2")[2]), digits=1), nsmall=1) # 1.14
dvrtxchill1<-format(round(mean(fixef(dvr.mod, pars="tx:chill1", summary=FALSE)), digits=1), nsmall=1)
dvrtxchill1sd<-format(round(mean(fixef(dvr.mod, pars="tx:chill1")[2]), digits=1), nsmall=1) # 1.14
dvrtxchill1 <- dvrtx + dvrchill1 + dvrtxchill1 ### 1.53
dvrtxchill2<-format(round(mean(fixef(dvr.mod, pars="tx:chill2", summary=FALSE)), digits=1), nsmall=1)
dvrtxchill2sd<-format(round(mean(fixef(dvr.mod, pars="tx:chill2")[2]), digits=1), nsmall=1) # 1.08
dvrtx
### Tough Model - TOUGHNESS DECREASES ACROSS ALL CHILL TXs!!!!
toughtx<-as.numeric(format(round(mean(fixef(toughness.mod, pars="tx", summary=FALSE)), digits=1), nsmall=1)) ### -0.05
toughtxsd<-as.numeric(format(round(mean(fixef(toughness.mod, pars="tx")[2]), digits=1), nsmall=1)) # 0.02
#toughtxsd <- toughtxsd[2] - toughtxsd[1]
toughchill1<-as.numeric(format(round(mean(fixef(toughness.mod, pars="chill1", summary=FALSE)), digits=1), nsmall=1)) ### -0.06
toughchill1sd<-as.numeric(format(round(mean(fixef(toughness.mod, pars="chill1")[2]), digits=1), nsmall=1)) # 0.02
#toughchill1sd <- toughchill1sd[2] - toughchill1sd[1]
toughchill2<-as.numeric(format(round(mean(fixef(toughness.mod, pars="chill2", summary=FALSE)), digits=1), nsmall=1)) ### -0.05
toughchill2sd<-as.numeric(format(round(mean(fixef(toughness.mod, pars="chill2")[2]), digits=1), nsmall=1)) # 0.02
#toughchill2sd <- toughchill2sd[2] - toughchill2sd[1]
toughtxchill1<-as.numeric(format(round(mean(fixef(toughness.mod, pars="tx:chill1", summary=FALSE)), digits=1), nsmall=1))
toughtxchill1sd<-as.numeric(format(round(mean(fixef(toughness.mod, pars="tx:chill1")[2]), digits=1), nsmall=1)) # 0.03
#toughtxchill1sd <- toughtxchill1sd[2] - toughtxchill1sd[1]
toughtxchill1 <- toughtx + toughchill1 + toughtxchill1 ### -0.09
toughtxchill2<-as.numeric(format(round(mean(fixef(toughness.mod, pars="tx:chill2", summary=FALSE)), digits=1), nsmall=1))
toughtxchill2sd<-as.numeric(format(round(mean(fixef(toughness.mod, pars="tx:chill2")[2]), digits=1), nsmall=1)) # 0.03
#toughtxchill2sd <- toughtxchill2sd[2] - toughtxchill2sd[1]
toughtxchill2 <- toughtx + toughchill2 + toughtxchill2 ### -0.08
toughtxchill2
toughtx
toughchill2
#toughtxchill1sd <- toughtxchill1sd[2] - toughtxchill1sd[1]
toughtxchill1 <- mean(fixef(toughness.mod, pars="tx", summary=FALSE)) + mean(fixef(toughness.mod, pars="chill1")[2]) + mean(fixef(toughness.mod, pars="tx:chill1", summary=FALSE)) ### -0.09
toughtxchill1
mean(fixef(toughness.mod, pars="tx", summary=FALSE))
mean(fixef(toughness.mod, pars="chill1")[2])
#toughtxchill1sd <- toughtxchill1sd[2] - toughtxchill1sd[1]
toughtxchill1 <- mean(fixef(toughness.mod, pars="tx", summary=FALSE)) + mean(fixef(toughness.mod, pars="chill1", summary=FALSE)) + mean(fixef(toughness.mod, pars="tx:chill1", summary=FALSE)) ### -0.09
toughtxchill1
