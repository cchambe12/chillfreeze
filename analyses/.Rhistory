chill.stan$species.name <- ifelse(chill.stan$species=="SALPUR", "Salix purpurea", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="SORAME", "Sorbus americana", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="VIBDEN", "Viburnum dentatum", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="FAGGRA", "Fagus grandifolia", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="NYSSYL", "Nyssa sylvatica", chill.stan$species.name)
rmspp <- c("FAGGRA", "NYSSYL")
chill.stan <- chill.stan[!(chill.stan$species%in%rmspp),]
#### Now for mu plots based of bb_analysis/models_stan_plotting.R ###
figpath <- "figures"
figpathmore <- "roottoshoot_brms" ### change based on model
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 8)
# display.brewer.all()
alphahere = 0.4
#xlab <- "Model estimate of change in \nduration of vegetative risk (days)"
#xlab <- "Model estimate of change in growing season length (days)"
#xlab <- "Model estimate of change in shoot apical meristem damage"
#xlab <- expression(paste("Model estimate of change in chlorophyll content (mg/", cm^2, ")"))
#xlab <- "Model estimate of change in leaf toughness (N)"
#mu <- expression(mu)
#xlab <- expression(paste("Model estimate of change in leaf thickness (", mu, "m)", sep="")) ## change based on model
#xlab <- "Model estimate of change in shoot growth (cm)"
#xlab <- "Model estimate of change in total biomass (g)"
xlab <- "Model estimate of change in belowground \nto aboveground biomass ratio (g)"
if(FALSE){
#xlab <- "Model estimate of change in belowground biomass (g)"
#xlab <- "Model estimate of change in aboveground biomass (g)"
}
#sumer.ni <- summary()$summary
#sumer.ni[grep("mu_", rownames(sumer.ni)),]
#sort(unique(chill.stan$species)) # numbers are alphabetical
spp <- unique(chill.stan$species)
modelhere <- roottoshoot.mod
tx <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 2] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select(mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx", "[", i, "]", sep="")
}
tx$parameter<-new.names
chill1 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 3] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("chill1", "[", i, "]", sep="")
}
chill1$parameter<-new.names
mod.ranef<-full_join(tx, chill1)
chill2 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 4] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("chill2", "[", i, "]", sep="")
}
chill2$parameter<-new.names
mod.ranef <- full_join(mod.ranef, chill2)
txchill1 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 5] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx:chill1", "[", i, "]", sep="")
}
txchill1$parameter<-new.names
mod.ranef<-full_join(mod.ranef, txchill1)
txchill2 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 6] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx:chill2", "[", i, "]", sep="")
}
txchill2$parameter<-new.names
mod.ranef<-full_join(mod.ranef, txchill2)
modoutput <- tidy(modelhere, prob=c(0.5))
#quartz()
source("exp_muplot_brms.R")
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-10, 10) , 16.5, 3.5) ## use for DVR
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-35, 35) , 36.5, 3.5) ## use for gslengthlo
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-8, 8) , 9, 3.5) ## meristem
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-5, 5) , 5.5, 3.5) ## chloro
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-.15, .15) , .16, 3.5) ##toughness
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-35, 35) , 36.5, 3.5) ## thickness
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-22, 22) , 23.5, 3.5) ## ht final
#muplotfx(modelhere, "", 8, 8, c(0,5), c(-8, 8) , 9, 3.5) ## tot biomass
muplotfx(modelhere, "", 8, 8, c(0,5), c(-1, 1) , 1.1, 3.5) ### root to shoot
#### Not included for now: muplotfx(modelhere, "", 8, 8, c(0,5), c(-10, 10) , 11, 3.5) ## ht diff
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(RColorBrewer)
library(rstan)
library(dplyr)
library(broom)
# Set Working Directory
setwd("~/Documents/git/chillfreeze/analyses")
chillfrz <- read.csv("output/clean_dvr_traits.csv", header=TRUE)
rmspp <- c("NYSSYL", "FAGGRA")
chillfrz <- chillfrz[!(chillfrz$species%in%rmspp),]
## load the model
load("stan/gslengthlo_brms.Rdata") ## missing
load("stan/toughness_brms.Rdata")
load("stan/htfinal_brms.Rdata") ## missing
mod <- gslengthlo.mod
mod <- gslength.mod
mod90<-as.data.frame(tidy(mod, prob=0.9))
names(mod90)<-c("term", "estimate", "error", "10%", "90%")
mod50<-as.data.frame(tidy(mod, prob=0.5))
names(mod50)<-c("term", "estimate", "error", "25%", "75%")
modfull <- full_join(mod90, mod50)
mod98<-as.data.frame(tidy(mod, prob=0.98))
names(mod98)<-c("term", "estimate", "error", "2%", "98%")
modfull <- full_join(modfull, mod98)
modfull <- subset(modfull, select=c("term", "estimate", "2%", "10%", "25%", "75%", "90%", "98%"))
write.csv(modfull, file="output/gslength_modeloutput.csv", row.names=FALSE)
mod <- htdiff.mod
mod90<-as.data.frame(tidy(mod, prob=0.9))
names(mod90)<-c("term", "estimate", "error", "10%", "90%")
mod50<-as.data.frame(tidy(mod, prob=0.5))
names(mod50)<-c("term", "estimate", "error", "25%", "75%")
modfull <- full_join(mod90, mod50)
mod98<-as.data.frame(tidy(mod, prob=0.98))
names(mod98)<-c("term", "estimate", "error", "2%", "98%")
modfull <- full_join(modfull, mod98)
modfull <- subset(modfull, select=c("term", "estimate", "2%", "10%", "25%", "75%", "90%", "98%"))
write.csv(modfull, file="output/htfinal_modeloutput.csv", row.names=FALSE)
mod <- toughness.mod
mod90<-as.data.frame(tidy(mod, prob=0.9))
names(mod90)<-c("term", "estimate", "error", "10%", "90%")
mod50<-as.data.frame(tidy(mod, prob=0.5))
names(mod50)<-c("term", "estimate", "error", "25%", "75%")
modfull <- full_join(mod90, mod50)
mod98<-as.data.frame(tidy(mod, prob=0.98))
names(mod98)<-c("term", "estimate", "error", "2%", "98%")
modfull <- full_join(modfull, mod98)
modfull <- subset(modfull, select=c("term", "estimate", "2%", "10%", "25%", "75%", "90%", "98%"))
write.csv(modfull, file="output/toughness_modeloutput.csv", row.names=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
# Load libraries
library(bayesplot) ## for plotting
library(egg) ## for plotting
library(shinystan)
library(rstanarm)
library(rstan)
library(brms)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Set working directory
setwd("~/Documents/git/chillfreeze/analyses")
source('source/stan_utility.R')
#chill.stan <- read.csv("output/clean_dvr_60dayoutput.csv", header=TRUE)
#chill.stan <- read.csv("output/fakedata_height.csv", header=TRUE)
chill.stan <- read.csv("output/clean_dvr_traits.csv")
rmspp <- c("FAGGRA", "NYSSYL")
chill.stan <- chill.stan[!(chill.stan$species%in%rmspp),]
chill.stan <- chill.stan[!is.na(chill.stan$mg.cm2),]
chill.stan$mg.cm2 <- chill.stan$mg.cm2*100
chill.stan$chlavg <- as.numeric(chill.stan$chlavg)
chill.stan <- chill.stan[!is.na(chill.stan$chlavg),]
get_prior(chlavg ~ tx*chill1 + tx*chill2 + (tx*chill1 + tx*chill2 | species),
data=chill.stan)
chl.mod <- brm(chlavg ~ tx*chill1 + tx*chill2 + (tx*chill1 + tx*chill2 | species),
data=chill.stan, iter=4000, warmup=2500,
prior = prior(normal(30, 10), class=Intercept),
control=list(max_treedepth=15, adapt_delta=0.99))
save(chl.mod, file="~/Documents/git/chillfreeze/analyses/stan/chlavg_brms.Rdata")
rm(list=ls())
options(stringsAsFactors = FALSE)
# Load libraries
library(RColorBrewer)
library(rstan)
library(dplyr)
library(broom)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Set working directory
setwd("~/Documents/git/chillfreeze/analyses")
## load the model
load("stan/chlavg_brms.Rdata")
chill.stan <- read.csv("output/clean_dvr_traits.csv")
chill.stan$species.name <- NA
chill.stan$species.name <- ifelse(chill.stan$species=="ACESAC", "Acer saccharinum", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="ALNRUG", "Alnus rugosa", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="BETPAP", "Betula papyrifera", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="BETPOP", "Betula populifolia", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="CORRAC", "Cornus racemosa", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="SALPUR", "Salix purpurea", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="SORAME", "Sorbus americana", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="VIBDEN", "Viburnum dentatum", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="FAGGRA", "Fagus grandifolia", chill.stan$species.name)
chill.stan$species.name <- ifelse(chill.stan$species=="NYSSYL", "Nyssa sylvatica", chill.stan$species.name)
rmspp <- c("FAGGRA", "NYSSYL")
chill.stan <- chill.stan[!(chill.stan$species%in%rmspp),]
#### Now for mu plots based of bb_analysis/models_stan_plotting.R ###
figpath <- "figures"
figpathmore <- "chlavg_brms" ### change based on model
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 8)
# display.brewer.all()
alphahere = 0.4
xlab <- expression(paste("Model estimate of change in chlorophyll content (mg/", cm^2, ")"))
modelhere <- chl.mod
tx <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 2] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select(mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx", "[", i, "]", sep="")
}
tx$parameter<-new.names
chill1 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 3] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("chill1", "[", i, "]", sep="")
}
chill1$parameter<-new.names
mod.ranef<-full_join(tx, chill1)
chill2 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 4] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("chill2", "[", i, "]", sep="")
}
chill2$parameter<-new.names
mod.ranef <- full_join(mod.ranef, chill2)
txchill1 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 5] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx:chill1", "[", i, "]", sep="")
}
txchill1$parameter<-new.names
mod.ranef<-full_join(mod.ranef, txchill1)
txchill2 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 6] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx:chill2", "[", i, "]", sep="")
}
txchill2$parameter<-new.names
mod.ranef<-full_join(mod.ranef, txchill2)
modoutput <- tidy(modelhere, prob=c(0.5))
#quartz()
source("exp_muplot_brms.R")
spp <- unique(chill.stan$species)
tx <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 2] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select(mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx", "[", i, "]", sep="")
}
tx$parameter<-new.names
chill1 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 3] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("chill1", "[", i, "]", sep="")
}
chill1$parameter<-new.names
mod.ranef<-full_join(tx, chill1)
chill2 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 4] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("chill2", "[", i, "]", sep="")
}
chill2$parameter<-new.names
mod.ranef <- full_join(mod.ranef, chill2)
txchill1 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 5] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx:chill1", "[", i, "]", sep="")
}
txchill1$parameter<-new.names
mod.ranef<-full_join(mod.ranef, txchill1)
txchill2 <- coef(modelhere, prob=c(0.25, 0.75))$species[, c(1, 3:4), 6] %>%
as.data.frame() %>%
round(digits = 2) %>%
rename(mean = Estimate) %>%
rename(`25%` = Q25) %>%
rename(`75%` = Q75) %>%
dplyr::select( mean, `25%`, `75%`)
new.names<-NULL
for(i in 1:length(spp)){
new.names[i]<-paste("tx:chill2", "[", i, "]", sep="")
}
txchill2$parameter<-new.names
mod.ranef<-full_join(mod.ranef, txchill2)
modoutput <- tidy(modelhere, prob=c(0.5))
#quartz()
source("exp_muplot_brms.R")
muplotfx(modelhere, "", 8, 8, c(0,5), c(-5, 5) , 5.5, 3.5) ## chloro
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(RColorBrewer)
library(rstan)
library(dplyr)
library(broom)
# Set Working Directory
setwd("~/Documents/git/chillfreeze/analyses")
chillfrz <- read.csv("output/clean_dvr_traits.csv", header=TRUE)
rmspp <- c("NYSSYL", "FAGGRA")
chillfrz <- chillfrz[!(chillfrz$species%in%rmspp),]
load("stan/chlavg_brms.Rdata")
mod <- chl.mod
mod90<-as.data.frame(tidy(mod, prob=0.9))
names(mod90)<-c("term", "estimate", "error", "10%", "90%")
mod50<-as.data.frame(tidy(mod, prob=0.5))
names(mod50)<-c("term", "estimate", "error", "25%", "75%")
modfull <- full_join(mod90, mod50)
mod98<-as.data.frame(tidy(mod, prob=0.98))
names(mod98)<-c("term", "estimate", "error", "2%", "98%")
modfull <- full_join(modfull, mod98)
modfull <- subset(modfull, select=c("term", "estimate", "2%", "10%", "25%", "75%", "90%", "98%"))
write.csv(modfull, file="output/chlavg_modeloutput.csv", row.names=FALSE)
#load models and data to report numbers of things
options(stringsAsFactors = FALSE)
library(brms)
## Set Working Directory
setwd("~/Documents/git/chillfrz/analyses/")
## Set Working Directory
setwd("~/Documents/git/chillfrz/analyses/")
## Set Working Directory
setwd("~/Documents/git/chillfreeze/analyses/")
## load the model
load("stan/dvr_brms.Rdata")
load("stan/gslengthlo_brms.Rdata")
load("stan/meristem_brms.Rdata")
load("stan/chlavg_brms.Rdata")
load("stan/toughness_brms.Rdata")
load("stan/thickness_brms.Rdata")
load("stan/htfinal_brms.Rdata")
load("stan/totbiomass_brms.Rdata")
load("stan/roottoshoot_brms.Rdata")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(ggplot2)
df <- data.frame(temp =c(10, 10, 10, 10, 10, 10, 7, 7, 3, 3, 0, 0, -3, -3, -3, 0, 3, 3, 7, 7, 10),
time =c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:01"))
growthchamber <- ggplot(df, aes(x=factor(df$time,levels = c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:01")), y=temp, group=1)) +
geom_line(aes(x=factor(df$time,levels = c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:01")))) + theme_classic() +
xlab("Time (hr)") + ylab("Temperature (°C)")
quartz()
growthchamber
df <- data.frame(temp =c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 3, 3, 0, 0, -3, -3, -3, 0, 3, 3, 7, 7, 10),
time =c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:01"))
df <- data.frame(temp =c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 3, 3, 0, 0, -3, -3, -3, 0, 3, 3, 7, 7, 10),
time =c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00",
"17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00",
"4:00", "5:00", "6:00", "7:00", "8:00"))
growthchamber <- ggplot(df, aes(x=factor(df$time,levels = c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")), y=temp, group=1)) +
geom_line(aes(x=factor(df$time,levels = c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")))) + theme_classic() +
xlab("Time (hr)") + ylab("Temperature (°C)")
quartz()
growthchamber
growthchamber <- ggplot(df, aes(x=factor(df$time), y=temp)) +
geom_line(aes(x=factor(df$time))) + theme_classic() +
scale_x_continuous(labels= c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")) +
xlab("Time (hr)") + ylab("Temperature (°C)")
growthchamber
growthchamber <- ggplot(df, aes(x=factor(df$time), y=temp)) +
geom_line(aes(x=factor(df$time))) + theme_classic() +
scale_x_discrete(labels= c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")) +
xlab("Time (hr)") + ylab("Temperature (°C)")
growthchamber
growthchamber <- ggplot(df, aes(x=factor(df$time), y=temp)) +
geom_line(aes(x=factor(df$time))) + theme_classic() +
scale_x_discrete(breaks =c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00"),
labels= c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")) +
xlab("Time (hr)") + ylab("Temperature (°C)")
growthchamber
growthchamber <- ggplot(df, aes(x=factor(df$time,levels = c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00",
"18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00", "4:00",
"5:00", "6:00", "7:00", "8:01")), y=temp)) +
geom_line(aes(x=factor(df$time,levels = c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00",
"18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00", "4:00",
"5:00", "6:00", "7:00", "8:01")))) + theme_classic() +
scale_x_discrete(breaks =c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00"),
labels= c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")) +
xlab("Time (hr)") + ylab("Temperature (°C)")
growthchamber
growthchamber <- ggplot(df, aes(x=factor(df$time,levels = c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00",
"18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00", "4:00",
"5:00", "6:00", "7:00", "8:01")), y=temp, group=1)) +
geom_line(aes(x=factor(df$time,levels = c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00",
"18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00", "4:00",
"5:00", "6:00", "7:00", "8:01")))) + theme_classic() +
scale_x_discrete(breaks =c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00"),
labels= c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")) +
xlab("Time (hr)") + ylab("Temperature (°C)")
growthchamber
df <- data.frame(temp =c(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 3, 3, 0, 0, -3, -3, -3, 0, 3, 3, 7, 7, 10),
time =c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00",
"17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00",
"4:00", "5:00", "6:00", "7:00", "8:01"))
growthchamber <- ggplot(df, aes(x=factor(df$time,levels = c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00",
"18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00", "4:00",
"5:00", "6:00", "7:00", "8:01")), y=temp, group=1)) +
geom_line(aes(x=factor(df$time,levels = c("8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00",
"18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "0:00", "1:00", "2:00", "3:00", "4:00",
"5:00", "6:00", "7:00", "8:01")))) + theme_classic() +
scale_x_discrete(breaks =c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:01"),
labels= c("8:00", "10:00", "12:00", "14:00", "16:00",
"18:00", "20:00", "22:00", "0:00", "2:00", "4:00",
"6:00", "8:00")) +
xlab("Time (hr)") + ylab("Temperature (°C)")
growthchamber
